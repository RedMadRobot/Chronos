apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

// This is the library version used when deploying the artifact
version = "1.0.7"
archivesBaseName = "chronos-kotlin"
android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}


def siteUrl = 'https://github.com/RedMadRobot/Chronos'      // Homepage URL of the library
def gitUrl = 'https://github.com/RedMadRobot/Chronos.git'   // Git repository URL
group = "com.redmadrobot"

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            artifactId = archivesBaseName
            project {
                packaging 'aar'

                // Add your description here
                name 'Chronos for Kotlin'

                description 'Android library that handles asynchronous tasks in a proper way'
                url siteUrl

                // Set your license
                licenses {
                    license {
                        name 'MIT License'
                        url 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id 'm_efimov'
                        name 'Maxim Efimov'
                        email 'me@redmadrobot.com'
                    }
                    developer {
                        id 'ejohnic'
                        name 'Evgeniy Gaponov'
                        email 'e.gaponov@redmadrobot.com'
                    }
                    developer {
                        id 'xanderblinov'
                        name 'Alexander Blinov'
                        email 'a.blinov@redmadrobot.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl

                }
            }
        }
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile 'com.android.support:support-annotations:23.1.1'
    compile 'de.greenrobot:eventbus:2.4.0'

    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    android.libraryVariants.all { variant ->
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
            options.links("http://docs.oracle.com/javase/7/docs/api/");
            options.links("http://d.android.com/reference/");
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    def systemEnvUser = System.getenv("bintray.user")
    def systemEnvKey = System.getenv("bintray.apikey")

    user = systemEnvUser == null ? properties.getProperty("bintray.user") : systemEnvUser
    key = systemEnvKey == null? properties.getProperty("bintray.apikey") : systemEnvKey

    configurations = ['archives']
    pkg {
        repo = "maven"
        name = "chronos-kotlin"
        desc = 'Android library that handles asynchronous tasks in a proper way'
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = ["MIT"]
        publish = true
    }
}