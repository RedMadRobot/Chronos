package com.redmadrobot.chronos;


import android.support.annotation.NonNull;
import android.support.annotation.Nullable;

/**
 * Result of an {@link ChronosOperation} execution. Contain either
 * operations' output, or an exception, thrown during the operations' execution. <br><br> It's a
 * must for subclasses to have a public constructor with no arguments.
 *
 * @param <ResultType> type of output generated by the related operation.
 * @author maximefimov
 * @see ChronosOperation#getResultClass()
 */
public abstract class ChronosOperationResult<ResultType> {

    private int mId;

    private ChronosOperation<ResultType> mOperation;

    private ResultType mOutput;

    private Exception mException;

    private boolean isBroadcast = false;

    /**
     * @return the operations' output, is the launch was successful. If exception waw thrown during
     * the operations' run, null will be returned. However, null may be a valid result of the
     * operation.
     */
    @SuppressWarnings("unused")
    public final ResultType getOutput() {
        return mOutput;
    }

    /**
     * @param output the result of operation.
     * @see #getOutput()
     */
    final void setOutput(@Nullable final ResultType output) {
        mOutput = output;
    }

    /**
     * Геттер ошибки выполнения операции.
     *
     * @return exception thrown during operations' launch. Returns null if there was no exception.
     */
    @SuppressWarnings("unused")
    @Nullable
    public final Exception getException() {
        return mException;
    }

    /**
     * @param exception exception thrown during the operations' launch.
     */
    final void setException(@NonNull final Exception exception) {
        mException = exception;
    }

    /**
     * @return operation which result is stored in this object.
     */
    @SuppressWarnings("unused")
    @NonNull
    public final ChronosOperation<ResultType> getOperation() {
        return mOperation;
    }

    /**
     * @param operation operation which result is stored in this object.
     */
    final void setOperation(@NonNull final ChronosOperation<ResultType> operation) {
        mOperation = operation;
    }

    /**
     * @return Text error description. May be null if there was no error, or it doesn't have a
     * description.
     */
    @Nullable
    public final String getErrorMessage() {
        return mException == null ? null : mException.getMessage();
    }

    /**
     * @return <b>true</b> if no exceptions was thrown during the operations' launch, <b>false</b>
     * otherwise
     */
    @SuppressWarnings("unused")
    public final boolean isSuccessful() {
        return mException == null;
    }

    /**
     * @return the unique id of operation launch.
     * @see #setId(int)
     */
    final int getId() {
        return mId;
    }

    /**
     * @param id the unique id of operation launch.
     * @see #getId()
     */
    final void setId(final int id) {
        mId = id;
    }

    /**
     * @return <b>true</b> if the object should be broadcasted, <b>false</b> otherwise
     */
    final boolean isBroadcast() {
        return isBroadcast;
    }

    /**
     * @param isBroadcast if the result should be broadcasted among all clients
     */
    final void setBroadcast(final boolean isBroadcast) {
        this.isBroadcast = isBroadcast;
    }
}
